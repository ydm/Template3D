#include "shaders.hpp"
#include <sstream>
#include "utils/file.hpp"


namespace shaders
{
    Shader::Shader(const GLenum type, const std::string& source)
    : type_(type)
    , source_(source)
    , id_(0)
    {

    }

    
    bool Shader::create()
    {
        GLenum err = GL_NO_ERROR;

        // Crerate shader object.
        id_ = glCreateShader(type_);
        err = glGetError();
        if (err == GL_INVALID_ENUM)
        {
            std::cerr << "[E] Shader::create: glCreateShader: `type` is not an accepted value." << std::endl;
            return false;
        }

        if (id_ == 0)
        {
            std::cerr << "[E] Shader::create: glCreateShader: Error while creating shader object." << std::endl;
            return false;
        }

        // Assign source.
        std::string& src = utils::file::read(source_);
        const char *ary[1] = { src.c_str() };
        glShaderSource(id_, 1, ary, NULL);

        // Check for errors.
        err = glGetError();
        if (err != GL_NO_ERROR)
        {
            switch (err)
            {
            case GL_INVALID_VALUE: std::cerr << "[E] Shader::create: glShaderSource: `shader` is not a value generated by OpenGL" << std::endl; break;
            case GL_INVALID_OPERATION: std::cerr << "[E] Shader::create: glShaderSource: `shader` is not a shader object" << std::endl; break;
            }
            return false;
        }

        // Check if shader compilation is supported.
        GLboolean supported = GL_FALSE;
        glGetBooleanv(GL_SHADER_COMPILER, &supported);
        if (supported == GL_FALSE)
        {
            std::cout << "[I] Shader::create: shader compilation is not supported." << std::endl;
            return true;
        }

        // Compile shader.
        glCompileShader(id_);

        // Check status.
        GLint status = GL_FALSE;
        glGetShaderiv(id_, GL_COMPILE_STATUS, &status);
        return status == GL_TRUE;
    }


    bool Shader::free()
    {
        if (id_ == 0)
        {
            std::cerr << "Shader: free() called for invalid shader object." << std::endl;
            return false;
        }
        // If id_ is 0, it will be silently ignored
        glDeleteShader(id_);
        if (glGetError() == GL_INVALID_VALUE)
        {

        }
        return true;
    }
}
